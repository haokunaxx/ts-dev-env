/**
 * 思路：
 *  左侧的1不要动
 *  碰到第一个0之后，将后续所有的0根据操作移至第一个0后面(通过操作2), 比如（1010000 => 1001000 => 1000100 => 1000010 => 1000001）
 *  将中间部分连续的0转换成1...0（根据操作1）,即把 1000001 => 1111101
 *  分析规律可以发现：
 *    最后结果字符串中0的位置 为 第一个出现0的位置 + 之后的字符串中出现的0的个数
 */
function maximumBinaryString(binary: string): string {
  const zeroIdx = binary.indexOf('0')
  const len = binary.length
  if (zeroIdx < 0) {
    return binary
  }
  const arr = Array(len).fill(1)
  let p = zeroIdx
  for (let i = p + 1; i < len; i++) {
    if (binary[i] === '0') {
      p++
    }
  }
  arr[p] = 0
  return arr.join('')
}

/*
给你一个二进制字符串 binary ，它仅有 0 或者 1 组成。你可以使用下面的操作任意次对它进行修改：

操作 1 ：如果二进制串包含子字符串 "00" ，你可以用 "10" 将其替换。
比方说， "00010" -> "10010"
操作 2 ：如果二进制串包含子字符串 "10" ，你可以用 "01" 将其替换。
比方说， "00010" -> "00001"
请你返回执行上述操作任意次以后能得到的 最大二进制字符串 。如果二进制字符串 x 对应的十进制数字大于二进制字符串 y 对应的十进制数字，那么我们称二进制字符串 x 大于二进制字符串 y 。

示例 1：
  输入：binary = "000110"
  输出："111011"
  解释：一个可行的转换为：
  "000110" -> "000101" 
  "000101" -> "100101" 
  "100101" -> "110101" 
  "110101" -> "110011" 
  "110011" -> "111011"
示例 2：
  输入：binary = "01"
  输出："01"
  解释："01" 没办法进行任何转换。
 
*/
