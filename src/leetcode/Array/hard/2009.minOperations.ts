// 思路：排序、去重、滑动窗口
function minOperations(nums: number[]): number {
  const len = nums.length
  nums = nums.sort((a, b) => a - b)
  let res = len - 1
  let m = 1
  for (let i = m; i < nums.length; i++) {
    if (nums[i] !== nums[i - 1]) {
      nums[m++] = nums[i]
    }
  }
  let j = 1
  for (let i = 0; i < m; i++) {
    const cur = nums[i],
      max = cur + len - 1
    while (j < m && nums[j] <= max) {
      // 总个数 - 能复用的个数
      res = Math.min(res, len - (j - i + 1))
      j++
    }
  }
  return res
}

// console.log(minOperations([4, 2, 5, 3]))
console.log(minOperations([8, 5, 9, 9, 8, 4]))
// console.log(
//   minOperations([
//     29, 32, 46, 30, 11, 32, 49, 26, 18, 33, 34, 16, 48, 42, 23, 33
//   ])
// )
// console.log(minOperations([10, 49, 16, 22, 28, 34, 35, 7]))
// console.log(
//   minOperations([
//     6871, 3056, 8843, 3642, 4544, 300, 6054, 6345, 2161, 1107, 1957, 6273, 2799,
//     6665, 2000, 1483, 3148, 1655, 7468, 4904, 9195, 9500, 7041, 7335, 8494, 386,
//     7754, 8739, 6893, 1015, 6411, 641, 4631, 6156, 7146, 4461, 9517, 960, 7328,
//     5314, 3846, 9943, 59, 3310, 9637, 3296, 7056, 4873, 5226, 3943, 5488, 4193,
//     8906, 259, 626, 9800, 9725, 8610, 901, 2467, 3722, 9322, 9500, 1348, 8727,
//     5618, 8641, 6579, 9689, 1776, 6421, 7690, 6414, 8600, 4285, 3513, 3210,
//     7290, 8918, 882, 2099, 6472, 4902, 553, 6420, 4586, 3478, 5130, 7785, 3679,
//     2301, 5460, 4285, 9409, 1160, 7447, 3127, 8771, 9863, 9452, 9879, 207, 3792,
//     5044, 9256, 8011, 8119, 8815, 6762, 2255, 3754, 4301, 5534, 5667, 3672,
//     1063, 4667, 7711, 6225, 9914, 7845, 1180, 7461, 6807, 7219, 5071, 3185,
//     8433, 2367, 3397, 1608, 7779, 3893, 4172, 4470, 2793, 502, 4781, 2659, 7601,
//     784, 2267, 5121, 9394, 2582, 3479, 4087, 2110, 7723, 6859, 3423, 1512, 9040,
//     2479, 1704, 8963, 7801, 6430, 4575, 2263, 3525, 3325, 3491, 476, 8585, 3243
//   ])
// )
// console.log(minOperations([4,2,5,3]))
// console.log(minOperations([1, 10, 100, 1000]))

// console.log(minOperations([1,2,3,5,6]))
// console.log(minOperations([8, 5, 9, 9, 8, 4]))

/*
  给你一个整数数组 nums 。每一次操作中，你可以将 nums 中 任意 一个元素替换成 任意 整数。

  如果 nums 满足以下条件，那么它是 连续的 ：

  nums 中所有元素都是 互不相同 的。
  nums 中 最大 元素与 最小 元素的差等于 nums.length - 1 。
  比方说，nums = [4, 2, 5, 3] 是 连续的 ，但是 nums = [1, 2, 3, 5, 6] 不是连续的 。

  请你返回使 nums 连续 的 最少 操作次数。
*/

/*

示例 1：
  输入：nums = [4,2,5,3]
  输出：0
  解释：nums 已经是连续的了。

示例 2：
  输入：nums = [1,2,3,5,6]
  输出：1
  解释：一个可能的解是将最后一个元素变为 4 。
  结果数组为 [1,2,3,5,4] ，是连续数组。

示例 3：
  输入：nums = [1,10,100,1000]
  输出：3
  解释：一个可能的解是：
  - 将第二个元素变为 2 。
  - 将第三个元素变为 3 。
  - 将第四个元素变为 4 。
  结果数组为 [1,2,3,4] ，是连续数组。
 
*/
